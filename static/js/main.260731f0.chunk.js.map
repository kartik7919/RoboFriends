{"version":3,"sources":["serviceWorker.js","Components/card.js","Components/cardlist.js","Components/searchbox.js","Components/scroll.js","Containers/app.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","Cardlist","robots","map","num","i","key","Searchbox","searchchange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onsearchchange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredrobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCHSC,EAZJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MACpB,OACC,yBAAKC,UAAU,6CACf,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,6BACA,4BAAKC,GACL,2BAAIC,MCUSI,EAfA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEhB,OAAO,6BACDA,EAAOC,KAAI,SAACC,EAAIC,GACrB,OAAO,kBAAC,EAAD,CACPC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCAJU,EARC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OACC,yBAAKV,UAAU,OACf,2BAAOA,UAAU,mCAAmCW,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCG3FI,G,MARF,SAACC,GACb,OACG,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC9DJ,EAAMK,YCgDIC,E,YA7Cd,aAAc,IAAD,8BACZ,+CAaFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAbxC,EAAKC,MAAM,CACVxB,OAAQ,GACRqB,YAAa,IAJF,E,iFAQM,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAQ,EAAKT,SAAS,CAACpB,OAAO6B,S,+BASpB,IAAD,EACoBC,KAAKN,MAAzBxB,EADA,EACAA,OAAOqB,EADP,EACOA,YACPU,EAAe/B,EAAOgC,QAAO,SAACC,GAC1C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAYa,kBAErD,OAAQlC,EAAOoC,OAIjB,yBAAKxC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,OAAQ+B,MARM,2C,GA1BRM,aCElBC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SN0HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.260731f0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\r\n\r\n\r\nconst Card=({id,name,email})=>{\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw\">\r\n\t\t<img alt=\"robot\" src={`https://robohash.org/${id}?100*100`}/>\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Card;","import React from \"react\"\r\nimport Card from \"./card\"\r\n\r\n\r\nconst Cardlist=({robots})=>{\r\n\t\r\n\treturn(<div>\r\n\t\t    {robots.map((num,i)=>{\r\n\t\treturn <Card \r\n\t\tkey={i}\r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}\r\n\t\t/>\r\n    }\r\n\t   )\r\n    }\r\n\t\t   </div>)\r\n}\r\nexport default Cardlist;","import React from 'react'\r\n\r\n\r\n\r\nconst Searchbox=({searchchange})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots' onChange={searchchange}/>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Searchbox;","import React from 'react'\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n    <div style={{overflow:'scroll',border:'5px solid black',height:'500px'}}>\r\n    {props.children}\r\n    </div>\r\n\t\t)\r\n   \r\n}\r\nexport default Scroll;","import React,{Component} from 'react'\r\nimport Cardlist from'../Components/cardlist'\r\nimport Searchbox from '../Components/searchbox'\r\nimport './app.css'\r\nimport Scroll from '../Components/scroll'\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t\t\r\n\t}\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=>response.json())\r\n\t.then(users=>{this.setState({robots:users})})\r\n\t}\r\n\r\nonsearchchange=(event)=>{\r\n  this.setState({searchfield:event.target.value})\r\n   \r\n   }\r\n   \r\n\t\r\n        render(){\r\n        \tconst {robots,searchfield}=this.state\r\n          const filteredrobots=robots.filter((robot)=>{\r\n   \treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n})\r\n   \treturn(!robots.length?<h1>LOADING</h1>\r\n   \t\t\r\n   \t:\r\n   \t\t\t \r\n\t\t<div className=\"tc\">\r\n\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t<Searchbox searchchange={this.onsearchchange}/>\r\n\t\t<Scroll>\r\n\t\t<Cardlist robots={filteredrobots}/>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t)\r\n\t\t\r\n}\r\n   \r\n        \r\n\t}\r\n\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\"\nimport App from \"./Containers/app\"\n\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}